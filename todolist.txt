Voici les principaux problèmes de sécurité que j'ai identifiés dans votre code et les moyens de les corriger :

Injection SQL
Votre code n'effectue aucune validation ou échappement des données d'entrée utilisateur ($session et $survey). Un attaquant pourrait injecter du code malveillant dans ces variables.
Solution : Utilisez des requêtes préparées avec des paramètres liés pour éviter l'injection SQL. Vous pouvez également utiliser des fonctions d'échappement de données comme mysqli_real_escape_string ou htmlspecialchars.

Fuite de fichiers
La fonction loadSurveys charge le contenu d'un fichier basé sur le paramètre $session fourni par l'utilisateur. Un attaquant pourrait exploiter cette fonction pour lire le contenu de n'importe quel fichier sur le système.
Solution : Validez soigneusement le paramètre $session avant de l'utiliser pour charger un fichier. Vous pouvez utiliser une liste blanche de caractères autorisés ou une expression régulière pour vous assurer que le paramètre ne contient aucun chemin de fichier malveillant.

Exécution de code indésirable
Votre code utilise eval et create_function, ce qui peut être dangereux si les données d'entrée utilisateur ne sont pas correctement validées.
Solution : Évitez d'utiliser eval et create_function si possible. Si vous devez les utiliser, assurez-vous de valider et d'échapper correctement les données d'entrée utilisateur avant de les utiliser.

Fuite de données sensibles
Votre code peut afficher des erreurs et des messages d'erreur contenant des informations sensibles sur le système ou les données stockées.
Solution : Désactivez l'affichage des erreurs en production (display_errors = Off) et mettez en place un système de journalisation des erreurs approprié. Vous pouvez également créer des pages d'erreur personnalisées pour masquer les détails techniques.

Vulnérabilités liées aux en-têtes
Votre code ne définit pas d'en-têtes de sécurité appropriés, ce qui peut exposer votre application à des attaques comme le détournement de clic, la falsification de requête inter-site (CSRF), etc.
Solution : Définissez des en-têtes de sécurité appropriés, tels que X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, Referrer-Policy, etc.

Stockage non sécurisé des données sensibles
Votre code stocke les données de l'utilisateur (enquêtes) dans des fichiers JSON en texte clair.
Solution : Envisagez de chiffrer les données sensibles avant de les stocker ou d'utiliser une base de données sécurisée au lieu de fichiers texte.

Problèmes de validation des entrées
Votre code ne valide pas correctement les entrées utilisateur dans plusieurs endroits, ce qui peut conduire à des vulnérabilités comme l'injection de code, le déni de service, etc.
Solution : Mettez en place une validation rigoureuse des entrées utilisateur, y compris la taille, le type et la syntaxe des données. Utilisez des expressions régulières, des listes blanches et d'autres techniques de validation appropriées.

Problèmes de gestion des sessions
Votre code utilise une méthode personnalisée pour gérer les sessions ($session), mais il n'est pas clair si cette méthode est sécurisée contre les attaques comme le vol de session, le rejeu, etc.
Solution : Envisagez d'utiliser les mécanismes de gestion de session standard de PHP (session_start, $_SESSION, etc.) qui sont plus robustes et sécurisés. Assurez-vous de définir correctement les paramètres de sécurité de session (session.cookie_secure, session.cookie_httponly, etc.).

Vulnérabilités liées au chargement de ressources externes
Votre code charge des ressources externes (polices, bibliothèques JavaScript) via des URL non sécurisées (HTTP).
Solution : Chargez toutes les ressources externes via des connexions sécurisées (HTTPS) pour éviter les attaques de l'homme du milieu (MITM) et d'autres attaques réseau.

Failles XSS (Cross-Site Scripting)
Votre code n'échappe pas correctement les données d'entrée utilisateur avant de les afficher dans le HTML, ce qui peut conduire à des vulnérabilités XSS.
Solution : Échappez toujours les données d'entrée utilisateur avant de les afficher dans le HTML en utilisant des fonctions comme htmlspecialchars ou une bibliothèque de modèles sécurisée.
Il est important de noter que ces problèmes de sécurité sont courants et qu'il est essentiel de les résoudre pour protéger votre application et vos utilisateurs. En suivant les solutions recommandées et en adoptant les meilleures pratiques de sécurité, vous pourrez renforcer considérablement la sécurité de votre code.